<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Influencer & Brand Connector</title>
  <!-- Load Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Load React and ReactDOM from CDN -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <!-- Load Babel to transpile JSX -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <!-- Load Lucide icons from CDN -->
  <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
  <!-- Set Inter font family for a clean look -->
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
    }
  </style>
</head>
<body class="bg-gray-100 antialiased">

  <div id="root"></div>

  <script type="text/babel">
    const { useState, createElement } = React;
    const { createRoot } = ReactDOM;

    // A helper function to dynamically create React icon components from the Lucide library.
    // This resolves the "lucideReact is not defined" error.
    const createIconComponent = (iconName) => {
      const iconData = lucide.icons[iconName];
      if (!iconData) {
        console.error(`Icon "${iconName}" not found in Lucide.`);
        return () => null;
      }
      return ({ size = 24, strokeWidth = 2, color = "currentColor", ...props }) => (
        createElement('svg', {
          xmlns: "http://www.w3.org/2000/svg",
          width: size,
          height: size,
          viewBox: "0 0 24 24",
          fill: "none",
          stroke: color,
          strokeWidth: strokeWidth,
          strokeLinecap: "round",
          strokeLinejoin: "round",
          ...props,
        },
        iconData.map((part, index) => {
          const [tag, attrs] = part;
          return createElement(tag, { key: index, ...attrs });
        })
      ));
    };

    const Bell = createIconComponent('bell');
    const Search = createIconComponent('search');
    const MessageSquare = createIconComponent('message-square');
    const Users = createIconComponent('users');
    const Briefcase = createIconComponent('briefcase');
    const Home = createIconComponent('home');
    const PlusCircle = createIconComponent('plus-circle');
    const MoreVertical = createIconComponent('more-vertical');
    const ThumbsUp = createIconComponent('thumbs-up');
    const MessageCircle = createIconComponent('message-circle');
    const Share2 = createIconComponent('share-2');
    const Bookmark = createIconComponent('bookmark');
    const Send = createIconComponent('send');
    const User = createIconComponent('user');

    // Mock data for posts to simulate a dynamic feed.
    const mockPosts = [
      {
        id: 1,
        author: {
          name: "Alex Johnson",
          handle: "@alex.j",
          avatar: "https://placehold.co/100x100/4F46E5/FFFFFF?text=AJ",
          type: "Influencer"
        },
        content: {
          type: "image",
          src: "https://placehold.co/800x600/60A5FA/FFFFFF?text=Product+Collaboration",
          text: "Excited to partner with BrandX on their new campaign! The new product is a game-changer. Let's create something amazing together. #BrandCollaboration #InfluencerMarketing"
        },
        engagement: {
          likes: 1245,
          comments: 56,
          shares: 32
        },
      },
      {
        id: 2,
        author: {
          name: "Tech Solutions Inc.",
          handle: "@techsolutions",
          avatar: "https://placehold.co/100x100/10B981/FFFFFF?text=TS",
          type: "Brand"
        },
        content: {
          type: "text",
          text: "We're looking for tech influencers to review our new software suite. Do you have a passion for productivity tools? Connect with us to discuss opportunities! #TechPartnership #Sponsor"
        },
        engagement: {
          likes: 852,
          comments: 112,
          shares: 51
        },
      },
      {
        id: 3,
        author: {
          name: "Jane Doe",
          handle: "@jane_travels",
          avatar: "https://placehold.co/100x100/F97316/FFFFFF?text=JD",
          type: "Influencer"
        },
        content: {
          type: "image",
          src: "https://placehold.co/800x600/FDBA74/FFFFFF?text=Travel+Partner",
          text: "Just got back from an incredible trip sponsored by GoExplore! The experiences were unforgettable. Can't wait to share my full travel guide. #TravelBlogger #GoExplore"
        },
        engagement: {
          likes: 2100,
          comments: 189,
          shares: 98
        },
      },
    ];

    // Mock data for suggested connections.
    const mockSuggestions = [
      {
        id: 1,
        name: "Fashion Hub",
        handle: "@fashionhub",
        avatar: "https://placehold.co/100x100/D946EF/FFFFFF?text=FH",
        type: "Brand",
      },
      {
        id: 2,
        name: "Ryan Carter",
        handle: "@ryan.carter",
        avatar: "https://placehold.co/100x100/3B82F6/FFFFFF?text=RC",
        type: "Influencer",
      },
      {
        id: 3,
        name: "Gourmet Foods",
        handle: "@gourmetfoods",
        avatar: "https://placehold.co/100x100/EF4444/FFFFFF?text=GF",
        type: "Brand",
      },
    ];

    const App = () => {
      const [showPostModal, setShowPostModal] = useState(false);

      // Component for a single post card.
      const PostCard = ({ post }) => (
        <div className="bg-white rounded-xl shadow-sm p-4 mb-4 border border-gray-200">
          <div className="flex items-center mb-3">
            <img
              src={post.author.avatar}
              alt={post.author.name}
              className="w-10 h-10 rounded-full mr-3"
            />
            <div>
              <h3 className="font-semibold text-gray-800">{post.author.name}</h3>
              <p className="text-sm text-gray-500">{post.author.handle}</p>
              <span className={`text-xs font-medium px-2 py-0.5 rounded-full mt-1 inline-block ${
                post.author.type === "Influencer" ? "bg-purple-100 text-purple-700" : "bg-green-100 text-green-700"
              }`}>
                {post.author.type}
              </span>
            </div>
            <MoreVertical className="ml-auto text-gray-400 cursor-pointer" size={20} />
          </div>

          <p className="text-gray-700 mb-4">{post.content.text}</p>
          {post.content.type === "image" && (
            <img
              src={post.content.src}
              alt="Post content"
              className="w-full rounded-lg mb-4 object-cover"
            />
          )}

          {/* Engagement bar */}
          <div className="flex items-center text-gray-500 text-sm border-t border-b py-2 mb-3">
            <span className="mr-4 flex items-center">
              <ThumbsUp size={16} className="mr-1 text-blue-500" />
              {post.engagement.likes}
            </span>
            <span className="mr-4 flex items-center">
              <MessageCircle size={16} className="mr-1" />
              {post.engagement.comments}
            </span>
            <span className="mr-4 flex items-center">
              <Share2 size={16} className="mr-1" />
              {post.engagement.shares}
            </span>
            <div className="ml-auto flex items-center space-x-2">
              <Bookmark size={16} className="cursor-pointer" />
              <Send size={16} className="cursor-pointer" />
            </div>
          </div>
        </div>
      );

      return (
        <div className="bg-gray-100 min-h-screen font-sans antialiased">
          {/* Header */}
          <header className="bg-white sticky top-0 z-50 shadow-sm p-4 flex items-center justify-between md:justify-around border-b border-gray-200">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-indigo-600 hidden md:block">ConnectSphere</h1>
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search for influencers or brands..."
                  className="bg-gray-100 pl-10 pr-4 py-2 rounded-full w-full md:w-80 focus:outline-none focus:ring-2 focus:ring-indigo-400"
                />
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
              </div>
            </div>

            {/* Mobile menu / Desktop nav */}
            <nav className="flex items-center space-x-4">
              <Home size={24} className="text-indigo-600 cursor-pointer hidden md:block" />
              <Users size={24} className="text-gray-500 cursor-pointer hidden md:block" />
              <Briefcase size={24} className="text-gray-500 cursor-pointer hidden md:block" />
              <MessageSquare size={24} className="text-gray-500 cursor-pointer" />
              <Bell size={24} className="text-gray-500 cursor-pointer" />
              <button
                onClick={() => setShowPostModal(true)}
                className="bg-indigo-600 text-white rounded-full p-2 hover:bg-indigo-700 transition duration-200"
              >
                <PlusCircle size={24} />
              </button>
              <img
                src="https://placehold.co/100x100/3B82F6/FFFFFF?text=U"
                alt="User Avatar"
                className="w-8 h-8 rounded-full cursor-pointer"
              />
            </nav>
          </header>

          {/* Main Content */}
          <main className="container mx-auto p-4 flex flex-col md:flex-row gap-6 mt-4">
            {/* Left Sidebar (User Profile & Navigation) */}
            <aside className="w-full md:w-1/4">
              <div className="bg-white rounded-xl shadow-sm p-6 mb-6 border border-gray-200">
                <div className="flex flex-col items-center">
                  <img
                    src="https://placehold.co/150x150/3B82F6/FFFFFF?text=U"
                    alt="User Avatar"
                    className="w-24 h-24 rounded-full mb-4 border-4 border-indigo-200"
                  />
                  <h2 className="text-xl font-bold text-gray-800">Your Name</h2>
                  <p className="text-gray-500 text-sm">Digital Content Creator</p>
                </div>
                <div className="mt-6 border-t border-gray-200 pt-4">
                  <nav className="space-y-3">
                    <a href="#" className="flex items-center text-gray-700 hover:text-indigo-600 transition">
                      <User size={20} className="mr-3" />
                      <span>My Profile</span>
                    </a>
                    <a href="#" className="flex items-center text-gray-700 hover:text-indigo-600 transition">
                      <Users size={20} className="mr-3" />
                      <span>Connections</span>
                    </a>
                    <a href="#" className="flex items-center text-gray-700 hover:text-indigo-600 transition">
                      <Briefcase size={20} className="mr-3" />
                      <span>Opportunities</span>
                    </a>
                    <a href="#" className="flex items-center text-gray-700 hover:text-indigo-600 transition">
                      <MessageSquare size={20} className="mr-3" />
                      <span>Messages</span>
                    </a>
                  </nav>
                </div>
              </div>
            </aside>

            {/* Central Feed */}
            <section className="w-full md:w-1/2">
              {mockPosts.map(post => (
                <PostCard key={post.id} post={post} />
              ))}
            </section>

            {/* Right Sidebar (Suggestions & Discover) */}
            <aside className="w-full md:w-1/4">
              <div className="bg-white rounded-xl shadow-sm p-6 mb-6 border border-gray-200">
                <h3 className="font-bold text-gray-800 text-lg mb-4">Who to follow</h3>
                <div className="space-y-4">
                  {mockSuggestions.map(user => (
                    <div key={user.id} className="flex items-center">
                      <img
                        src={user.avatar}
                        alt={user.name}
                        className="w-10 h-10 rounded-full mr-3"
                      />
                      <div>
                        <h4 className="font-semibold text-gray-800">{user.name}</h4>
                        <p className="text-sm text-gray-500">{user.handle}</p>
                        <span className={`text-xs font-medium px-2 py-0.5 rounded-full mt-1 inline-block ${
                          user.type === "Influencer" ? "bg-purple-100 text-purple-700" : "bg-green-100 text-green-700"
                        }`}>
                          {user.type}
                        </span>
                      </div>
                      <button className="ml-auto bg-indigo-500 text-white text-xs px-3 py-1 rounded-full hover:bg-indigo-600 transition">
                        Follow
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </aside>
          </main>

          {/* New Post Modal */}
          {showPostModal && (
            <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center p-4 z-[100]">
              <div className="bg-white rounded-xl shadow-lg p-6 w-full max-w-xl">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold">Create New Post</h2>
                  <button onClick={() => setShowPostModal(false)} className="text-gray-500 hover:text-gray-800">
                    &times;
                  </button>
                </div>
                <textarea
                  className="w-full h-32 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-400 resize-none"
                  placeholder="What's on your mind?..."
                ></textarea>
                <div className="mt-4 flex justify-between items-center">
                  <button className="bg-gray-200 text-gray-700 font-semibold px-4 py-2 rounded-full hover:bg-gray-300 transition">
                    Add Image
                  </button>
                  <button className="bg-indigo-600 text-white font-semibold px-4 py-2 rounded-full hover:bg-indigo-700 transition">
                    Publish
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      );
    };

    // Render the App component to the root div
    const root = createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>

</body>
</html>
